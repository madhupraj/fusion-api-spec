{
  "openapi": "3.0.1",
  "info": {
    "title": "Fusion APIs",
    "version": "v1"
  },
  "tags": [
    {
      "name": "Default"
    }
  ],
  "paths": {
    "/api/v1/ifi/{ifiID}/accountHolders/{accountHolderID}/transactionCategories": {
      "get": {
        "summary": "Get User Transaction Categories",
        "operationId": "getTransactionCategory",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountHolderID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTxnCategoriesResponsePayload"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create User Transaction Category",
        "operationId": "createTransactionCategory",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountHolderID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserTransactionCategoryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserTransactionCategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/accountHolders/{accountHolderID}/transactionPolicies": {
      "get": {
        "summary": "List All Account Holder TransactionPolicy",
        "operationId": "listAllAccountHolderTransactionPolicies",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "accountHolderID",
            "in": "path",
            "description": "ID  of the account holder whose policies are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListTransactionPoliciesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Account Holder TransactionPolicy",
        "operationId": "createAccountHolderTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "accountHolderID",
            "in": "path",
            "description": "ID of the account holder for whom a policy is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPolicyRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/accountHolders/{accountHolderID}/transactionPolicies/{transactionPolicyID}": {
      "get": {
        "summary": "Get Account Holder TransactionPolicy",
        "operationId": "getAccountHolderTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "accountHolderID",
            "in": "path",
            "description": "ID of the account holder whose particular policy is being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "transactionPolicyID",
            "in": "path",
            "description": "Transaction Policy ID of the account holder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456789101112
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Replace Account Holder TransactionPolicy",
        "operationId": "replaceAccountHolderTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "accountHolderID",
            "in": "path",
            "description": "ID of the account holder whose policy is being updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "transactionPolicyID",
            "in": "path",
            "description": "Transaction Policy ID of the account holder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456789101112
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceTransactionPolicyRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/accountHolders/{accountHolderID}/transactionPolicies/{transactionPolicyID}/{state}": {
      "patch": {
        "summary": "Update Account Holder TransactionPolicy State",
        "operationId": "updateAccountHolderTransactionPolicyState",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "accountHolderID",
            "in": "path",
            "description": "ID of the account holder whose policy state is being updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "transactionPolicyID",
            "in": "path",
            "description": "Transaction Policy ID of the account holder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456789101112
          },
          {
            "name": "state",
            "in": "path",
            "description": "Policy State of Transaction Policy",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ENABLED",
                "DISABLED"
              ]
            },
            "example": "ENABLED or DISABLED"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/aggregateExpressions": {
      "get": {
        "summary": "get All Aggregation Expressions",
        "operationId": "getAggregateExpressionList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAggregateExpressionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/applications": {
      "get": {
        "summary": "Get All Applications",
        "operationId": "getAllApplications",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/applications/editIndividual": {
      "post": {
        "summary": "Edit Individual Application",
        "operationId": "editApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/EditIndividualApplicationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/applications/newIndividual": {
      "post": {
        "summary": "Create Individual Application With Auto Approval",
        "operationId": "createApplicationWithAutoApproval",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountHolderWithAutoApprovalRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/applications/newIndividualApplication": {
      "post": {
        "summary": "Create Individual Application",
        "operationId": "createApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountHolderApplicationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/ifi/{ifiID}/applications/{applicationID}": {
      "get": {
        "summary": "Get Individual Application",
        "operationId": "getApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Individual Application",
        "operationId": "updateApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountHolderApplicationRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Individual Application",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/applications/{applicationID}/kycStatus/{kycStatus}": {
      "put": {
        "summary": "Update Application Status",
        "operationId": "updateApplicationKYCStatus",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kycStatus",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKycStatusRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/applications/{applicationID}/spool/{spoolID}": {
      "put": {
        "summary": "Update Application Spool",
        "operationId": "updateApplicationSpool",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "spoolID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/applications/{applicationID}/status/{newStatus}": {
      "put": {
        "summary": "Update Application Status",
        "operationId": "updateApplicationStatus",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newStatus",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/createEntityPolicyMapping": {
      "post": {
        "summary": "Create Entity Policy Mapping",
        "operationId": "createPolicyMapping",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyMappingRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/createExtendedProduct": {
      "post": {
        "summary": "CreateExtendedProduct api via fusion",
        "operationId": "createExtendedProduct",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateExtendedProductRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/createExtendedProductFamily": {
      "post": {
        "summary": "CreateExtendedProductFamily api via fusion",
        "operationId": "createExtendedProductFamily",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateExtendedProductFamilyRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFamily"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/entitycode/{entity}": {
      "get": {
        "summary": "Get Entity Code",
        "operationId": "getEntityCode",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getAllTransactionPoliciesByIFI": {
      "get": {
        "summary": "Get all transaction policies for a given IFI",
        "operationId": "getAllTransactionPoliciesByIFI",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTransactionPoliciesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getCoaList": {
      "get": {
        "summary": "Get all CoAs for a given IFI",
        "operationId": "getCoaListByIFI",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCoaListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getCoaNodes": {
      "get": {
        "summary": "Get all CoA Nodes for a given IFI and CoAID",
        "operationId": "getCoaNodesByIFIAndCoaID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "coaID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCoaNodesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getEntityGroupList": {
      "get": {
        "summary": "Get EntityGrouplist for a given ifi and entityType",
        "operationId": "getEntityGroupList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListEntityGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getPolicyMappings": {
      "get": {
        "summary": "Get PolicyMappings for a given ifi, entityID, policyEntityType, policyType and PolicyId",
        "operationId": "getPolicyMappings",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entityID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyEntityType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getProduct": {
      "get": {
        "summary": "Get Product with a given IFI and ProductID",
        "operationId": "getProductByIFIAndID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getProductFamily": {
      "get": {
        "summary": "Get ProductFamily for a given ifi and id",
        "operationId": "getProductFamily",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "productFamilyId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456789065434560
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFamily"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getProductFamilyList": {
      "get": {
        "summary": "Get ProductFamilyList for a given ifi",
        "operationId": "getProductFamilyList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductFamilyListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getProductList": {
      "get": {
        "summary": "Get ProductList for a given ifi",
        "operationId": "getProductList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getTransactionPoliciesByEntityID": {
      "get": {
        "summary": "get Transaction Policies by EntityID",
        "operationId": "getTransactionPoliciesByEntityID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTransactionPoliciesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/getTransactionPolicyByID": {
      "get": {
        "summary": "Get TransactionPolicy with a given ID",
        "operationId": "getProductByIFIAndID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/replaceTransactionPolicy/{transactionPolicyID}": {
      "put": {
        "summary": "Replace Transaction Policy",
        "operationId": "replaceTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "transactionPolicyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceTransactionPolicyRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/transactionPolicy": {
      "post": {
        "summary": "Create TransactionPolicy",
        "operationId": "createTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Builder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/athena-manager/updateTransactionPolicy/{transactionPolicyId}": {
      "patch": {
        "summary": "Update Transaction Policy State",
        "operationId": "updateTransactionPolicyState",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "transactionPolicyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionPolicyStateRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/bundles/{bundleID}/issueAccount": {
      "post": {
        "summary": "Issue specific Account from a bundle ",
        "operationId": "issueAccountProduct",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the Account is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle whose account product is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssueAccountArtifactRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAccountArtifactResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/bundles/{bundleID}/issueAccountProducts": {
      "post": {
        "summary": "Issue specific Account from a bundle ",
        "operationId": "issueAccountProduct",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the Account is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle whose account product is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssueAccountProductsRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAccountArtifactResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/bundles/{bundleID}/issueBundle": {
      "post": {
        "summary": "Issue bundle to a specific individual/company",
        "operationId": "issueBundle",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the bundle is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle which is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssueBundleRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBundleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/bundles/{bundleID}/issueBundleOverridingAssessment": {
      "post": {
        "summary": "Issue bundle to a specific individual/company without Assessment irrespective of ifi whitelisting",
        "operationId": "issueBundleOverridingOFACCheck",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the bundle is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle which is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/OverrideIssuanceRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBundleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/bundles/{bundleID}/issueFormFactor": {
      "post": {
        "summary": "Issue specific form factor of a resource to a specific individual/company",
        "operationId": "issueFormFactor",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the form factor is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle whose form factor/card is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssueFormFactorRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueFormFactorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/bundles/{bundleID}/issuePaymentProducts": {
      "post": {
        "summary": "Issue specific Account from a bundle ",
        "operationId": "issueMultiplePaymentProducts",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the Resource is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle whose account product is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssuePaymentProductsRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAccountArtifactResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/bundles/{bundleID}/issueResource": {
      "post": {
        "summary": "Issue specific resource of a bundle to a specific individual/company",
        "operationId": "issueResource",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the resource is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle whose resource is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssueResourceRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueResourceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/cards/orders": {
      "post": {
        "operationId": "placeBulkOrder",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/BulkOrderRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrderRequest"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/cards/orders/personalized": {
      "post": {
        "operationId": "placePersonalizedOrder",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PersonalizedOrderRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalizedOrderRequest"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/cards/orders/replacement": {
      "post": {
        "operationId": "placeReplacementOrder",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/EmbossAndActivateReplacementOrderRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSummary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/cards/orders/{orderID}/cancel": {
      "post": {
        "operationId": "cancelOrder",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "orderID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Void"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/cards/{cardID}/dispatch": {
      "post": {
        "operationId": "dispatchCard",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cardID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/DispatchOrderRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSummary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/cards/{cardIdentifier}": {
      "get": {
        "summary": "Get card details by ID",
        "operationId": "getCard",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cardIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Zeta-JWS",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardViewResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/cards/{cguid}/generatePin": {
      "post": {
        "summary": "Generate PIN for a card form factor",
        "operationId": "generatePin",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cguid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Builder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAndLinkFormFactorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/coas/{coaid}/coaNodes": {
      "get": {
        "summary": "Get all CoA Nodes for a given IFI and CoAID",
        "operationId": "getCoaNodesByIFIAndCoaID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "coaID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCoaNodesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/companies/{companyID}/beneficiaries": {
      "get": {
        "summary": "Get all the beneficiaries of a company",
        "operationId": "getBeneficiaries",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary details are being retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiaries list are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new beneficiary of a company",
        "operationId": "createBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateBeneficiaryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/companies/{companyID}/beneficiaries/{beneficiaryID}": {
      "get": {
        "summary": "Get details of a beneficiary by ID",
        "operationId": "getBeneficiaryByID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a beneficiary of a company",
        "operationId": "updateBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an company",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCorporateBeneficiaryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a beneficiary of a company",
        "operationId": "deleteBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an company",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/companies/{companyID}/beneficiaries/{beneficiaryID}/accounts": {
      "get": {
        "summary": "Get all the accounts of a beneficiary",
        "operationId": "getBeneficiaryAccounts",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary accounts are being retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new beneficiary account of a beneficiary",
        "operationId": "createBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose account is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateBeneficiaryAccountRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/companies/{companyID}/beneficiaries/{beneficiaryID}/accounts/{accountID}": {
      "get": {
        "summary": "Get details of a specific beneficiary account of an company's beneficiary ",
        "operationId": "getBeneficiaryAccountByID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account being retrieved exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary account being retrieved exists",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose beneficiary account details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "accountID",
            "in": "path",
            "description": "ID of the beneficiary account whose details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a account of a beneficiary",
        "operationId": "updateBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an company",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          },
          {
            "name": "accountID",
            "in": "path",
            "description": "ID of the account being updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCorporateBeneficiaryAccountRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a account of a beneficiary",
        "operationId": "deleteBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an company",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          },
          {
            "name": "accountID",
            "in": "path",
            "description": "ID of the account being updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/createExtendedProduct": {
      "post": {
        "summary": "CreateExtendedProduct api via fusion",
        "operationId": "createExtendedProduct",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateExtendedProductRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/createExtendedProductFamily": {
      "post": {
        "summary": "CreateExtendedProductFamily api via fusion",
        "operationId": "createExtendedProductFamily",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateExtendedProductFamilyRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFamily"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/entityGroups": {
      "get": {
        "summary": "Get EntityGrouplist for a given ifi and entityType",
        "operationId": "getEntityGroupList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListEntityGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/form_factor_products/{formFactorProductID}": {
      "get": {
        "description": "Get Form Factor Product details by ID",
        "operationId": "getFormFactorProduct",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formFactorProductID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormFactorProduct"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/fusion-config": {
      "get": {
        "operationId": "getAllFusionConfigs",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createFusionConfig",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AddFusionConfigRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FusionConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/fusion-config/{configID}": {
      "get": {
        "operationId": "getFusionConfigByID",
        "parameters": [
          {
            "name": "configID",
            "in": "path",
            "description": "ID of the fusionConfig whose details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FusionConfigResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateFusionConfig",
        "parameters": [
          {
            "name": "configID",
            "in": "path",
            "description": "ID of the fusionConfig whose details are being updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFusionConfigRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FusionConfigResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteConfigByID",
        "parameters": [
          {
            "name": "configID",
            "in": "path",
            "description": "ID of the fusionConfig whose details are being deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/individuals/{individualID}/beneficiaries": {
      "get": {
        "summary": "Get all the beneficiaries of an individual",
        "operationId": "getBeneficiaries",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary details are being retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiaries list are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new beneficiary of an individual",
        "operationId": "createBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateBeneficiaryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Beneficiary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/individuals/{individualID}/beneficiaries/{beneficiaryID}": {
      "get": {
        "summary": "Get details of a beneficiary by ID",
        "operationId": "getBeneficiaryByID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Beneficiary"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a beneficiary of an individual",
        "operationId": "updateBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an individual",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBeneficiaryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Beneficiary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a beneficiary of an individual",
        "operationId": "deleteBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an individual",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Beneficiary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/individuals/{individualID}/beneficiaries/{beneficiaryID}/accounts": {
      "get": {
        "summary": "Get all the accounts of a beneficiary",
        "operationId": "getBeneficiaryAccounts",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary accounts are being retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary accounts are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Creation of a beneficiary account",
        "operationId": "createBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AddBeneficiaryAccountForBeneficiaryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/individuals/{individualID}/beneficiaries/{beneficiaryID}/accounts/{accountID}": {
      "get": {
        "summary": "Get details of a specific beneficiary account of an individual's beneficiary ",
        "operationId": "getBeneficiaryAccountByID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account being retrieved exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary account being retrieved exists",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose beneficiary account details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "accountID",
            "in": "path",
            "description": "ID of the beneficiary account whose details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/individuals/{individualID}/beneficiaries/{beneficiaryID}/accounts/{beneficiaryAccountID}": {
      "put": {
        "summary": "Update of a beneficiary account",
        "operationId": "updateBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beneficiaryAccountID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBeneficiaryAccountRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccount"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete of a beneficiary account",
        "operationId": "deleteBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beneficiaryAccountID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/createCoa": {
      "post": {
        "summary": "Create Coa",
        "operationId": "createCoA",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCoaResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/createCoaNode": {
      "post": {
        "summary": "Create Coa node",
        "operationId": "createCoANode",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCoaNodeResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/createPolicy": {
      "post": {
        "summary": "Create Policy",
        "operationId": "createPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePolicyResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/getAggregateExpressionList": {
      "get": {
        "summary": "get All Aggregation Expressions",
        "operationId": "getAggregateExpressionList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAggregateExpressionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/getAllCoas": {
      "get": {
        "summary": "Get All Coas",
        "operationId": "getAllCoas",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllCoAsResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/getAllTransactionCategories": {
      "get": {
        "summary": "get All Transaction Categories",
        "operationId": "getAllTransactionCategories",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTxnCategoriesResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/getCalender": {
      "get": {
        "summary": "Get Calender",
        "operationId": "getCalendar",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCalendarResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/getPolicies": {
      "get": {
        "summary": "get Policies",
        "operationId": "getPolicies",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetPoliciesResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/getPolicy": {
      "get": {
        "summary": "get Policy",
        "operationId": "getPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetPolicyResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/replacePolicy": {
      "post": {
        "summary": "Replace Policy",
        "operationId": "replacePolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReplacePolicyRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReplacePolicyResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/ledger/updatePolicyState": {
      "post": {
        "summary": "Replace Policy",
        "operationId": "updatePolicyState",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyStateRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/orders/{orderId}/cards/list": {
      "get": {
        "summary": "Get card details by ID",
        "operationId": "getCardsByOrder",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Zeta-JWS",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/payment_products/list": {
      "post": {
        "summary": "Filter Payment Product detail by Resource Product",
        "operationId": "filterPaymentProduct",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListPaymentProductResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/payment_products/{paymentProductID}": {
      "get": {
        "summary": "Get Payment Product details by ID",
        "operationId": "getPaymentProduct",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentProductID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentProduct"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/policyMappings": {
      "get": {
        "summary": "Get PolicyMappings for a given ifi, entityID, policyEntityType, policyType and PolicyId",
        "operationId": "getPolicyMappings",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entityID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyEntityType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Entity Policy Mapping",
        "operationId": "createPolicyMapping",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyMappingRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/productFamilies": {
      "get": {
        "summary": "Get ProductFamilyList for a given ifi",
        "operationId": "getProductFamilyList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductFamilyListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/productFamilies/{productFamilyID}/products": {
      "get": {
        "summary": "Get Products by productFamilyID",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the account exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "productFamilyID",
            "in": "path",
            "description": "ProductFamilyID of required products",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of product",
            "schema": {
              "type": "string"
            },
            "example": "test"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "No of products needed in response",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 10
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number for products needed in response",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "test"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/productFamilies/{productFamilyID}/programs": {
      "get": {
        "summary": "Get programs by productFamilyID",
        "operationId": "getPrograms",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the account exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "productFamilyID",
            "in": "path",
            "description": "ProductFamilyID of required programs",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of program",
            "schema": {
              "type": "string"
            },
            "example": "test"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "No of programs needed in response",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 10
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number for programs needed in response",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "test"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/productFamilies/{productFamilyId}": {
      "get": {
        "summary": "Get ProductFamily for a given ifi and id",
        "operationId": "getProductFamily",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "productFamilyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFamily"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/products/{productID}": {
      "get": {
        "summary": "Get TransactionPolicy with a given ID",
        "operationId": "getProductByIFIAndID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "productID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/resourceByVector": {
      "get": {
        "summary": "Get resource details by vector",
        "operationId": "getResourceByAccountHolder",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/resource_products/{resourceProductID}/interceptors": {
      "get": {
        "summary": "List Interceptor",
        "operationId": "listInterceptor",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "resourceProductID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListInterceptorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Interceptor",
        "operationId": "addInterceptor",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "resourceProductID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Builder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Interceptor"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/resource_products/{resourceProductID}/interceptors/{interceptorID}": {
      "get": {
        "summary": "Get Interceptor",
        "operationId": "getInterceptor",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "resourceProductID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interceptorID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Interceptor"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Interceptor",
        "operationId": "updateInterceptor",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "resourceProductID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interceptorID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Builder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Interceptor"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/resources/{resourceID}": {
      "patch": {
        "summary": "Change the resource status",
        "operationId": "updateResource",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Builder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/resources/{resourceID}/form_factors/create": {
      "post": {
        "summary": "Provision form factor and link it to an existing resource",
        "operationId": "provisionFormFactor",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Builder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAndLinkFormFactorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/resources/{resourceID}/payments/list": {
      "get": {
        "summary": "Filter payment details by resourceID",
        "operationId": "getPaymentsByResourceId",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "resourceID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListPaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/resources/{resourceID}/payments/{paymentID}": {
      "get": {
        "summary": "Get payment details by paymentID and resourceID",
        "operationId": "getPayment",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "resourceID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/resources/{resourceID}/payments/{paymentID}/resume": {
      "post": {
        "summary": "Resume Intercepted Payment",
        "operationId": "resumePayment",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "resourceID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Builder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/resources/{resourceID}/vectors": {
      "post": {
        "summary": "Add vector to resource",
        "operationId": "addResourceVector",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "resourceID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Vector"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/transactionPolicies": {
      "get": {
        "summary": "Get all transaction policies for a given IFI",
        "operationId": "getAllTransactionPoliciesByIFI",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTransactionPoliciesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create TransactionPolicy",
        "operationId": "createTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Builder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/transactionPolicies/updateState": {
      "post": {
        "summary": "Replace Policy",
        "operationId": "updatePolicyState",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyStateRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/transactionPolicies/{transactionPolicyID}": {
      "put": {
        "summary": "Replace Transaction Policy",
        "operationId": "replaceTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "transactionPolicyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceTransactionPolicyRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ifi/{ifiID}/transactionPolicies/{transactionPolicyId}": {
      "patch": {
        "summary": "Update Transaction Policy State",
        "operationId": "updateTransactionPolicyState",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "transactionPolicyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionPolicyStateRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/applications": {
      "get": {
        "summary": "Get All Applications",
        "operationId": "getAllApplications",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/applications/editIndividual": {
      "post": {
        "summary": "Edit Individual Application",
        "operationId": "editApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/EditIndividualApplicationStandardRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/applications/newIndividual": {
      "post": {
        "summary": "Create Individual Application With Auto Approval",
        "operationId": "createApplicationWithAutoApproval",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountHolderWithAutoApprovalStandardRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/applications/newIndividualApplication": {
      "post": {
        "summary": "Create Individual Application",
        "operationId": "createApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountHolderApplicationStandardRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/applications/{applicationID}": {
      "get": {
        "summary": "Get Individual Application",
        "operationId": "getApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Individual Application",
        "operationId": "updateApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountHolderApplicationStandardRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Individual Application",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/applications/{applicationID}/kycStatus/{kycStatus}": {
      "put": {
        "summary": "Update Application Status",
        "operationId": "updateApplicationKYCStatus",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kycStatus",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKycStatusStandardRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/applications/{applicationID}/spool/{spoolID}": {
      "put": {
        "summary": "Update Application Spool",
        "operationId": "updateApplicationSpool",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "spoolID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/applications/{applicationID}/status/{newStatus}": {
      "put": {
        "summary": "Update Application Status",
        "operationId": "updateApplicationStatus",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "applicationID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newStatus",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/createEntityPolicyMapping": {
      "post": {
        "summary": "Create Entity Policy Mapping",
        "operationId": "createPolicyMapping",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyMappingRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyMappingStandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/createExtendedProduct": {
      "post": {
        "summary": "CreateExtendedProduct api via fusion",
        "operationId": "createExtendedProduct",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateExtendedProductRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/createExtendedProductFamily": {
      "post": {
        "summary": "CreateExtendedProductFamily api via fusion",
        "operationId": "createExtendedProductFamily",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateExtendedProductFamilyRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFamilyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/entitycode/{entity}": {
      "get": {
        "summary": "Get Entity Code",
        "operationId": "getEntityCode",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getAllTransactionPoliciesByIFI": {
      "get": {
        "summary": "Get all transaction policies for a given IFI",
        "operationId": "getAllTransactionPoliciesByIFI",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "showLimits",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getCoaList": {
      "get": {
        "summary": "Get all CoAs for a given IFI",
        "operationId": "getCoaListByIFI",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "No of products needed in response",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 10
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number for products needed in response",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": "test"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getCoaNodes": {
      "get": {
        "summary": "Get all CoA Nodes for a given IFI and CoAID",
        "operationId": "getCoaNodesByIFIAndCoaID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "coaID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCoaNodesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getEntityGroupList": {
      "get": {
        "summary": "Get EntityGrouplist for a given ifi and entityType",
        "operationId": "getEntityGroupList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getPolicyMappings": {
      "get": {
        "summary": "Get PolicyMappings for a given ifi, entityID, policyEntityType, policyType and PolicyId",
        "operationId": "getPolicyMappings",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entityID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyEntityType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getProduct": {
      "get": {
        "summary": "Get Product with a given IFI and ProductID",
        "operationId": "getProductByIFIAndID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getProductFamily": {
      "get": {
        "summary": "Get ProductFamily for a given ifi and id",
        "operationId": "getProductFamily",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "productFamilyId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456789065434560
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFamilyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getProductFamilyList": {
      "get": {
        "summary": "Get ProductFamilyList for a given ifi",
        "operationId": "getProductFamilyList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "No of products needed in response",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 10
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number for products needed in response",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": "test"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getProductList": {
      "get": {
        "summary": "Get ProductList for a given ifi",
        "operationId": "getProductList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "No of products needed in response",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 10
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number for products needed in response",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": "test"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getTransactionPoliciesByEntityID": {
      "get": {
        "summary": "get Transaction Policies by EntityID",
        "operationId": "getTransactionPoliciesByEntityID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTransactionPoliciesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/getTransactionPolicyByID": {
      "get": {
        "summary": "Get TransactionPolicy with a given ID",
        "operationId": "getProductByIFIAndID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyStandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/replaceTransactionPolicy/{transactionPolicyID}": {
      "put": {
        "summary": "Replace Transaction Policy",
        "operationId": "replaceTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "transactionPolicyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceTransactionPolicyRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyStandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/transactionPolicy": {
      "post": {
        "summary": "Create TransactionPolicy",
        "operationId": "createTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Builder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyStandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/athena-manager/updateTransactionPolicy/{transactionPolicyId}": {
      "patch": {
        "summary": "Update Transaction Policy State",
        "operationId": "updateTransactionPolicyState",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "transactionPolicyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionPolicyStateRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/bundles/{bundleID}/issueAccountProducts": {
      "post": {
        "summary": "Issue specific Account from a bundle ",
        "operationId": "issueMultipleAccountProducts",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the Account is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle whose account product is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssueAccountProductsRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAccountArtifactResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/bundles/{bundleID}/issueBundle": {
      "post": {
        "summary": "Issue bundle to a specific individual/company",
        "operationId": "issueBundle",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the bundle is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle which is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssueBundleRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBundleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/bundles/{bundleID}/issueBundleOverridingAssessment": {
      "post": {
        "summary": "Issue bundle to a specific individual/company without Assessment irrespective of ifi whitelisting",
        "operationId": "issueBundleOverridingOFACCheck",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the bundle is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle which is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/OverrideIssuanceRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBundleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/bundles/{bundleID}/issueFormFactor": {
      "post": {
        "summary": "Issue specific form factor of a resource to a specific individual/company",
        "operationId": "issueFormFactor",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the form factor is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle whose form factor/card is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssueFormFactorStandardRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueFormFactorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/bundles/{bundleID}/issuePaymentProducts": {
      "post": {
        "summary": "Issue specific Account from a bundle ",
        "operationId": "issueMultiplePaymentProducts",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the Resource is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle whose account product is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssuePaymentProductsRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueAccountArtifactResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/bundles/{bundleID}/issueResource": {
      "post": {
        "summary": "Issue specific resource of a bundle to a specific individual/company",
        "operationId": "issueResource",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the resource is being issued",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bundleID",
            "in": "path",
            "description": "ID of the bundle whose resource is being issued",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/IssueResourceStandardRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IssueResourceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/companies/{companyID}/beneficiaries": {
      "get": {
        "summary": "Get all the beneficiaries of a company",
        "operationId": "getBeneficiaries",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary details are being retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiaries list are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new beneficiary of a company",
        "operationId": "createBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateBeneficiaryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/companies/{companyID}/beneficiaries/{beneficiaryID}": {
      "get": {
        "summary": "Get details of a beneficiary by ID",
        "operationId": "getBeneficiaryByID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a beneficiary of a company",
        "operationId": "updateBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an company",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCorporateBeneficiaryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a beneficiary of a company",
        "operationId": "deleteBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an company",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/companies/{companyID}/beneficiaries/{beneficiaryID}/accounts": {
      "get": {
        "summary": "Get all the accounts of a beneficiary",
        "operationId": "getBeneficiaryAccounts",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary accounts are being retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new beneficiary account of a beneficiary",
        "operationId": "createBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose account is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateBeneficiaryAccountRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/companies/{companyID}/beneficiaries/{beneficiaryID}/accounts/{accountID}": {
      "get": {
        "summary": "Get details of a specific beneficiary account of an company's beneficiary ",
        "operationId": "getBeneficiaryAccountByID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account being retrieved exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary account being retrieved exists",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose beneficiary account details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "accountID",
            "in": "path",
            "description": "ID of the beneficiary account whose details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a account of a beneficiary",
        "operationId": "updateBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an company",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          },
          {
            "name": "accountID",
            "in": "path",
            "description": "ID of the account being updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCorporateBeneficiaryAccountRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a account of a beneficiary",
        "operationId": "deleteBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "companyID",
            "in": "path",
            "description": "ID of the company for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an company",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          },
          {
            "name": "accountID",
            "in": "path",
            "description": "ID of the account being updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateBeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/errorCodes": {
      "get": {
        "summary": "Get All Policy Errors",
        "operationId": "getPolicyErrors",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetPolicyErrorsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Policy Error Code",
        "operationId": "createPolicyErrorCode",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AddPolicyErrorCodeRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyErrorCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/errorCodes/{errorCode}": {
      "get": {
        "summary": "Get Policy Error Code",
        "operationId": "getPolicyErrorCode",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "errorCode",
            "in": "path",
            "description": "Policy Error Code ",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ERIN0012345"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyErrorCodeResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "update a policy error",
        "operationId": "updatePolicyErrorCode",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "errorCode",
            "in": "path",
            "description": "Policy Error Code ",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ERIN0012345"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyErrorCodeRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyErrorCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/individuals/{individualID}/beneficiaries": {
      "get": {
        "summary": "Get all the beneficiaries of an individual",
        "operationId": "getBeneficiaries",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary details are being retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiaries list are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new beneficiary of an individual",
        "operationId": "createBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateBeneficiaryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/individuals/{individualID}/beneficiaries/{beneficiaryID}": {
      "get": {
        "summary": "Get details of a beneficiary by ID",
        "operationId": "getBeneficiaryByID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a beneficiary of an individual",
        "operationId": "updateBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an individual",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBeneficiaryRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a beneficiary of an individual",
        "operationId": "deleteBeneficiary",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary which is being updated belonging to an individual",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "f0e68249-aed0-4359-9df2-a89a350567e9"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/individuals/{individualID}/beneficiaries/{beneficiaryID}/accounts": {
      "get": {
        "summary": "Get all the accounts of a beneficiary",
        "operationId": "getBeneficiaryAccounts",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary accounts are being retrieved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary accounts are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Creation of a beneficiary account",
        "operationId": "createBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AddBeneficiaryAccountForBeneficiaryFusionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/individuals/{individualID}/beneficiaries/{beneficiaryID}/accounts/{accountID}": {
      "get": {
        "summary": "Get details of a specific beneficiary account of an individual's beneficiary ",
        "operationId": "getBeneficiaryAccountByID",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account being retrieved exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary account being retrieved exists",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "description": "ID of the beneficiary whose beneficiary account details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "accountID",
            "in": "path",
            "description": "ID of the beneficiary account whose details are being retrieved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/individuals/{individualID}/beneficiaries/{beneficiaryID}/accounts/{beneficiaryAccountID}": {
      "put": {
        "summary": "Update of a beneficiary account",
        "operationId": "updateBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beneficiaryAccountID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBeneficiaryAccountFusionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete of a beneficiary account",
        "operationId": "deleteBeneficiaryAccount",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "individualID",
            "in": "path",
            "description": "ID of the individual for whom the beneficiary account is being created",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          {
            "name": "beneficiaryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beneficiaryAccountID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/createCoa": {
      "post": {
        "summary": "Create Coa",
        "operationId": "createCoA",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCoaResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/createCoaNode": {
      "post": {
        "summary": "Create Coa node",
        "operationId": "createCoANode",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCoaNodeResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/createPolicy": {
      "post": {
        "summary": "Create Policy",
        "operationId": "createPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePolicyResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/getAggregateExpressionList": {
      "get": {
        "summary": "get All Aggregation Expressions",
        "operationId": "getAggregateExpressionList",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/getAllCoas": {
      "get": {
        "summary": "Get All Coas",
        "operationId": "getAllCoas",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllCoAsResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/getAllTransactionCategories": {
      "get": {
        "summary": "get All Transaction Categories",
        "operationId": "getAllTransactionCategories",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTxnCategoriesResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/getCalender": {
      "get": {
        "summary": "Get Calender",
        "operationId": "getCalendar",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCalendarResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/getPolicies": {
      "get": {
        "summary": "get Policies",
        "operationId": "getPolicies",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/getPolicy": {
      "get": {
        "summary": "get Policy",
        "operationId": "getPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/replacePolicy": {
      "post": {
        "summary": "Replace Policy",
        "operationId": "replacePolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReplacePolicyRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReplacePolicyResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/ledger/updatePolicyState": {
      "post": {
        "summary": "Replace Policy",
        "operationId": "updatePolicyState",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyStateRequestPayload"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/productFamilies/{productFamilyID}/products": {
      "get": {
        "summary": "Get Products by productFamilyID",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the account exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "productFamilyID",
            "in": "path",
            "description": "ProductFamilyID of required products",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of product",
            "schema": {
              "type": "string"
            },
            "example": "test"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "No of products needed in response",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 10
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number for products needed in response",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": "test"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/productFamilies/{productFamilyID}/programs": {
      "get": {
        "summary": "Get programs by productFamilyID",
        "operationId": "getPrograms",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization) under which the account exists",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "productFamilyID",
            "in": "path",
            "description": "ProductFamilyID of required programs",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of program",
            "schema": {
              "type": "string"
            },
            "example": "test"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "No of programs needed in response",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": 10
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number for programs needed in response",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "example": "test"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort By needed in response",
            "schema": {
              "type": "string"
            },
            "example": "createdAt"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort Order needed in response",
            "schema": {
              "type": "string"
            },
            "example": "asc"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/resourceByVector": {
      "get": {
        "summary": "Get resources vector",
        "operationId": "getResourceByAccountHolder",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/transactionCategories": {
      "get": {
        "summary": "Get All TransactionCategory for an IFI",
        "operationId": "getAllTransactionCategories",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTxnCategoriesResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/transactionCategories/addTransactionCategory": {
      "post": {
        "summary": "Create TransactionCategory for an IFI",
        "operationId": "addTransactionCategory",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AddTransactionCategoryRequestV2"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AddPolicyTransactionCategoryResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/transactionCategories/{code}": {
      "get": {
        "summary": "Get TransactionCategory for an IFI and Code",
        "operationId": "getTransactionCategory",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetPolicyTransactionCategoryResponsePayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/transactionPolicies": {
      "get": {
        "summary": "Get all transaction policies for a given IFI",
        "operationId": "listAllTranasctionPolicies",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTransactionPoliciesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create TransactionPolicy",
        "operationId": "createTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPolicyRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/transactionPolicies/{transactionPolicyID}": {
      "get": {
        "summary": "Replace Transaction Policy",
        "operationId": "getTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "transactionPolicyID",
            "in": "path",
            "description": "Transaction Policy ID of the account holder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456789101112
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Replace Transaction Policy",
        "operationId": "replaceTransactionPolicy",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "transactionPolicyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceTransactionPolicyRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ifi/{ifiID}/transactionPolicies/{transactionPolicyID}/{state}": {
      "patch": {
        "summary": "Update TransactionPolicy State",
        "operationId": "updateTransactionPolicyState",
        "parameters": [
          {
            "name": "ifiID",
            "in": "path",
            "description": "ID of the IFI (on-boarded organization).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          },
          {
            "name": "transactionPolicyID",
            "in": "path",
            "description": "Transaction Policy ID of the account holder",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456789101112
          },
          {
            "name": "state",
            "in": "path",
            "description": "Policy State of Transaction Policy",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ENABLED",
                "DISABLED"
              ]
            },
            "example": "ENABLED or DISABLED"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionPolicyState"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPolicyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "operationId": "version",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Accessor": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "accountHolderID": {
            "type": "string"
          },
          "accountID": {
            "type": "string"
          },
          "transactionPolicyIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountVector"
            }
          },
          "accessors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Accessor"
            }
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountRelation"
            }
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "ownerAccountHolderID": {
            "type": "string"
          },
          "accountProviderID": {
            "type": "string"
          },
          "cardID": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "productFamilyID": {
            "type": "integer",
            "format": "int64"
          },
          "productID": {
            "type": "integer",
            "format": "int64"
          },
          "programIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ledgerID": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccountHolderVector": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "accountHolderID": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "AccountRelation": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "accountID": {
            "type": "string"
          },
          "relatedAccountID": {
            "type": "string"
          },
          "relationshipType": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccountVector": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "accountID": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "AddBeneficiaryAccountForBeneficiaryFusionRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the Beneficiary Account",
            "example": "ENABLED"
          },
          "nickname": {
            "type": "string",
            "description": "Nickname of the Beneficiary Account",
            "example": "true"
          },
          "accountInfo": {
            "$ref": "#/components/schemas/BeneficiaryAccountInfo"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          },
          "type": {
            "type": "string",
            "description": "type of beneficiary Account, IMPS, NEFT ,ZETA "
          },
          "verified": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "AddBeneficiaryAccountForBeneficiaryRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "beneficiaryID": {
            "type": "string"
          },
          "parentAccountHolderID": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "accountInfo": {
            "$ref": "#/components/schemas/BeneficiaryAccountInfo"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "verified": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "AddFusionConfigRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the key-value pair",
            "example": "123123"
          },
          "value": {
            "type": "string",
            "description": "The value of the key-value pair",
            "example": "test"
          },
          "type": {
            "type": "string",
            "description": "The type for the key-value config",
            "example": "SANDBOX_VBO_MAPPING"
          },
          "description": {
            "type": "string",
            "description": "The description for the key-value config",
            "example": "Description of the key"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AddPolicyErrorCodeRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code given to a policy error code",
            "example": "ERIN0012345"
          },
          "errorCode": {
            "type": "string",
            "description": "ErrorCode given to a policy ",
            "example": "TRANSACTION_OUTSIDE_TIME_RANGE"
          },
          "description": {
            "type": "string",
            "description": "Description of policy error"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information that you would like to associate with the transaction policy"
          }
        }
      },
      "AddPolicyTransactionCategoryResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "code": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "attrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxnCategoryAttrs"
            }
          }
        }
      },
      "AddTransactionCategoryRequestV2": {
        "required": [
          "code",
          "description",
          "ifiID"
        ],
        "type": "object",
        "properties": {
          "ifiID": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "transactionCategoryAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionCategoryStructure"
            }
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "accountHolderID": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "tag": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "accountHolderVectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountHolderVector"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DELETED"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "AggregateExpression": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifiId": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expression": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "updatedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AggregateRule": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT",
              "DEBIT_REVERSAL",
              "CREDIT_REVERSAL"
            ]
          },
          "transactionCategoryCode": {
            "type": "string"
          },
          "aggExpressionCode": {
            "type": "string"
          },
          "dailyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "weeklyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "monthlyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "quarterlyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "yearlyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "errorCode": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "VELOCITY",
              "VOLUME"
            ]
          }
        }
      },
      "BalanceRule": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT",
              "DEBIT_REVERSAL",
              "CREDIT_REVERSAL"
            ]
          },
          "minRequiredBalanceAfter": {
            "type": "integer",
            "format": "int64"
          },
          "maxAllowedBalanceAfter": {
            "type": "integer",
            "format": "int64"
          },
          "minRequiredBalanceBefore": {
            "type": "integer",
            "format": "int64"
          },
          "maxAllowedBalanceBefore": {
            "type": "integer",
            "format": "int64"
          },
          "transactionCategoryCode": {
            "type": "string"
          },
          "errorCode": {
            "type": "string"
          }
        }
      },
      "Beneficiary": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "requestID": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "accountHolderID": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "relationship": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "REAL",
              "LEGAL",
              "HEADLESS"
            ]
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficiaryVector"
            }
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficiaryAccount"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BeneficiaryAccount": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "isVerified": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "beneficiaryID": {
            "type": "string"
          },
          "parentAccountHolderID": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "accountInfo": {
            "$ref": "#/components/schemas/BeneficiaryAccountInfo"
          },
          "isDefault": {
            "type": "boolean"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BeneficiaryAccountInfo": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string"
          },
          "accountProvider": {
            "type": "string"
          },
          "nameAtAccountProvider": {
            "type": "string"
          },
          "routingCode": {
            "type": "string"
          },
          "accountType": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BeneficiaryAccountListResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "beneficiaryAccountList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficiaryAccount"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BeneficiaryAccountResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "beneficiaryID": {
            "type": "string"
          },
          "parentAccountHolderID": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "accountInfo": {
            "$ref": "#/components/schemas/BeneficiaryAccountInfo"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "verified": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "BeneficiaryListResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "beneficiaryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Beneficiary"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BeneficiaryResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "accountHolderID": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "relationship": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "REAL",
              "LEGAL",
              "HEADLESS"
            ]
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficiaryVector"
            }
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficiaryAccount"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BeneficiaryVector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "beneficiaryID": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Builder": {
        "type": "object"
      },
      "BulkOrderRequest": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "orderID": {
            "type": "string"
          },
          "cardSkuID": {
            "type": "string"
          },
          "plasticCode": {
            "type": "string"
          },
          "expiry": {
            "$ref": "#/components/schemas/Expiry"
          },
          "thirdLineEmbossing": {
            "type": "string"
          },
          "fourthLineEmbossing": {
            "type": "string"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tenantAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "vendorAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CalendarInfo": {
        "type": "object",
        "properties": {
          "weekStartOffset": {
            "type": "integer",
            "format": "int32"
          },
          "yearStartDay": {
            "type": "integer",
            "format": "int32"
          },
          "yearStartMonth": {
            "type": "integer",
            "format": "int32"
          },
          "timeZone": {
            "type": "string"
          },
          "ifiId": {
            "type": "integer",
            "format": "int64"
          },
          "calendarId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CardBinRange": {
        "type": "object",
        "properties": {
          "bin": {
            "type": "string"
          },
          "range": {
            "type": "string"
          }
        }
      },
      "CardSku": {
        "type": "object",
        "properties": {
          "cardSkuId": {
            "type": "string"
          },
          "productID": {
            "type": "string"
          },
          "ifi": {
            "type": "string"
          },
          "bin": {
            "type": "string"
          },
          "plasticCode": {
            "type": "string"
          },
          "vendorID": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "range": {
            "type": "string"
          },
          "binRange": {
            "type": "string"
          }
        }
      },
      "CardViewResponse": {
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Resource"
          },
          "cardID": {
            "type": "string"
          },
          "crn": {
            "type": "string"
          },
          "cardType": {
            "type": "string"
          },
          "maskedPan": {
            "type": "string"
          },
          "cardStatus": {
            "type": "string"
          },
          "associatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "orderDetails": {
            "$ref": "#/components/schemas/OrderDetails"
          },
          "tenantAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "binRange": {
            "$ref": "#/components/schemas/CardBinRange"
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "sensitiveView": {
            "$ref": "#/components/schemas/SensitiveCardView"
          }
        }
      },
      "Channel": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "paymentCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CoAConfig": {
        "type": "object",
        "properties": {
          "coaId": {
            "type": "integer",
            "format": "int64"
          },
          "ifiId": {
            "type": "integer",
            "format": "int64"
          },
          "coaDescription": {
            "type": "string"
          },
          "coaName": {
            "type": "string"
          },
          "coaDepth": {
            "type": "integer",
            "format": "int32"
          },
          "calendarId": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "Coa": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CoaNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ConnectionConfig": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountHolderVector"
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CorporateBeneficiaryAccountResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the Beneficiary account being created by the company",
            "example": "93480e72-b883-46fa-8f3f-abe326ab9df7"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the Beneficiary Account",
            "example": "ENABLED"
          },
          "beneficiaryID": {
            "type": "string",
            "description": "ID of the Beneficiary of the company whose account is being created",
            "example": "93480e72-b883-46fa-8f3f-abe326ab9df7"
          },
          "companyID": {
            "type": "string",
            "description": "ID of the company creating beneficiary account",
            "example": "93480e72-b883-46fa-8f3f-abe326ab9df7"
          },
          "nickname": {
            "type": "string",
            "description": "Nickname of the Beneficiary Account",
            "example": "true"
          },
          "accountInfo": {
            "$ref": "#/components/schemas/BeneficiaryAccountInfo"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          },
          "type": {
            "type": "string",
            "description": "Type of beneficiary ie NEFT or IMPS or ZETA",
            "example": "ZETA"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "CorporateBeneficiaryResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the Beneficiary being created by the company",
            "example": "93480e72-b883-46fa-8f3f-abe326ab9df7"
          },
          "ifiID": {
            "type": "integer",
            "description": "ID of the IFI (on-boarded organization) under which the beneficiary is being created",
            "format": "int64",
            "example": 123123
          },
          "companyID": {
            "type": "string",
            "description": "ID of the company for whom the beneficiary is being created",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the beneficiary being created",
            "example": "Chandler"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the beneficiary being created",
            "example": "Muriel"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the beneficiary being created",
            "example": "Bing"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the beneficiary being created",
            "example": "Male"
          },
          "profilePicURL": {
            "type": "string",
            "description": "Profile pic URL of the beneficiary being created",
            "example": "http://abc.com"
          },
          "relationship": {
            "type": "string",
            "description": "Relation of the beneficiary being created with the individual",
            "example": "Brother"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Type of the Account Holder for whom the beneficiary being created",
            "example": "LEGAL",
            "enum": [
              "REAL",
              "LEGAL",
              "HEADLESS"
            ]
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficiaryVector"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          },
          "createdAt": {
            "type": "string",
            "description": "Date/Time of the Beneficiary when created",
            "example": "2020-02-18T06:24:14.000+00:00"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date/Time of the Beneficiary when updated",
            "example": "2020-02-18T06:24:14.000+00:00"
          }
        }
      },
      "CreateAccountHolderApplicationRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "formID": {
            "type": "string"
          },
          "spoolID": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "individualType": {
            "type": "string"
          },
          "applicationType": {
            "type": "string",
            "enum": [
              "KYC",
              "CREATE_ACCOUNT_HOLDER",
              "EDIT_ACCOUNT_HOLDER"
            ]
          },
          "individualID": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "dob": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string"
          },
          "mothersMaidenName": {
            "type": "string"
          },
          "kycDetails": {
            "$ref": "#/components/schemas/KYCDetails"
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vector"
            }
          },
          "pops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/POP"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "source": {
            "type": "string"
          }
        }
      },
      "CreateAccountHolderApplicationStandardRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "mothersMaidenName": {
            "type": "string"
          },
          "kycDetails": {
            "$ref": "#/components/schemas/KYCDetails"
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vector"
            }
          },
          "pops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/POP"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "CreateAccountHolderWithAutoApprovalRequest": {
        "type": "object",
        "properties": {
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "formID": {
            "type": "string"
          },
          "requestID": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "spoolID": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "individualType": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "dob": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string"
          },
          "mothersMaidenName": {
            "type": "string"
          },
          "kycDetails": {
            "$ref": "#/components/schemas/KYCDetails"
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorRequest"
            }
          },
          "pops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/POP"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "CreateAccountHolderWithAutoApprovalStandardRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": "string"
          },
          "individualType": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "dob": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string"
          },
          "mothersMaidenName": {
            "type": "string"
          },
          "kycDetails": {
            "$ref": "#/components/schemas/KYCDetails"
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorRequest"
            }
          },
          "pops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/POP"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      },
      "CreateAndLinkFormFactorResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/Resource"
          },
          "provisionFormFactorResponse": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "CreateBeneficiaryRequest": {
        "type": "object"
      },
      "CreateCardDesignPolicyRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "logo": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "backgroundExpanded": {
            "type": "string"
          },
          "backgroundColor": {
            "type": "string"
          },
          "textColor": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateCoaNodeResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "nodeId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateCoaResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "coaId": {
            "type": "integer",
            "format": "int64"
          },
          "rootNodeId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateCorporateBeneficiaryAccountRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the Beneficiary Account",
            "example": "ENABLED"
          },
          "nickname": {
            "type": "string",
            "description": "Nickname of the Beneficiary Account",
            "example": "true"
          },
          "accountInfo": {
            "$ref": "#/components/schemas/BeneficiaryAccountInfo"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          },
          "type": {
            "type": "string",
            "description": "Type of beneficiary ie NEFT or IMPS or ZETA",
            "example": "ZETA"
          },
          "verified": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "CreateCorporateBeneficiaryRequest": {
        "type": "object"
      },
      "CreateCouponAccountingPolicyRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "couponName": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "denomination": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "isPartialRedemptionAllowed": {
            "type": "boolean"
          },
          "expiryAccount": {
            "type": "integer",
            "format": "int64"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "validFrom": {
            "type": "integer",
            "format": "int64"
          },
          "validUntil": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateExtendedProductFamilyRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "productFamily": {
            "$ref": "#/components/schemas/CreateProductFamilyRequest"
          },
          "issuancePolicy": {
            "$ref": "#/components/schemas/CreateIssuancePolicyRequest"
          },
          "transactionPolicyIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateExtendedProductRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "productRequest": {
            "$ref": "#/components/schemas/CreateProductRequest"
          },
          "issuancePolicyRequest": {
            "$ref": "#/components/schemas/CreateIssuancePolicyRequest"
          },
          "couponAccountingPolicyRequest": {
            "$ref": "#/components/schemas/CreateCouponAccountingPolicyRequest"
          },
          "cardDesignPolicyRequest": {
            "$ref": "#/components/schemas/CreateCardDesignPolicyRequest"
          },
          "transactionPolicyIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateIssuancePolicyRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "validFrom": {
            "type": "integer",
            "format": "int64"
          },
          "validUntil": {
            "type": "integer",
            "format": "int64"
          },
          "allowedAccountHolderGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disAllowedAccountHolderGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreatePolicyMappingRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "entityID": {
            "type": "string"
          },
          "policyEntityType": {
            "type": "string",
            "enum": [
              "PRODUCT_FAMILY",
              "PRODUCT",
              "PROGRAM",
              "ACCOUNT_HOLDER",
              "ACCOUNT"
            ]
          },
          "policyID": {
            "type": "string"
          },
          "policyType": {
            "type": "string",
            "enum": [
              "TRANSACTION_POLICY",
              "CARD_DESIGN_POLICY",
              "ISSUANCE_POLICY",
              "COUPON_ACCOUNTING_POLICY",
              "NOTIFICATION_POLICY",
              "FEE_CHARGES_POLICY",
              "INTEREST_POLICY",
              "ACCOUNT_DISCOVERY_POLICY"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "CreatePolicyRequestPayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "requestID": {
            "type": "string"
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "txnConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnConstraint"
            }
          },
          "policyTxnRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnRule"
            }
          },
          "policyBalanceRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyBalanceRule"
            }
          },
          "policyAggregateRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyAggregateRule"
            }
          },
          "effectiveFrom": {
            "type": "integer",
            "format": "int64"
          },
          "expiresAt": {
            "type": "integer",
            "format": "int64"
          },
          "policyViolationAction": {
            "type": "string",
            "enum": [
              "DECLINE_AND_NOTIFY",
              "DECLINE",
              "NOTIFY"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CreatePolicyResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "policyVersionID": {
            "type": "integer",
            "format": "int64"
          },
          "policyID": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateProductFamilyRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "coaID": {
            "type": "integer",
            "format": "int64"
          },
          "parentCoaNodeID": {
            "type": "integer",
            "format": "int64"
          },
          "accountingType": {
            "type": "string",
            "enum": [
              "ASSET",
              "LIABILITY",
              "INCOME",
              "EXPENSE",
              "EQUITY"
            ]
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "WALLET_BASED",
              "ACCOUNT_BASED"
            ]
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CreateProductRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "coaID": {
            "type": "integer",
            "format": "int64"
          },
          "productFamilyID": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "ENABLED",
              "BLOCKED"
            ]
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CreateTransactionPolicyRequest": {
        "required": [
          "coaID",
          "violationAction"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code given to a transaction policy",
            "example": "POLIN0012345"
          },
          "description": {
            "type": "string",
            "description": "Description of transaction policy"
          },
          "scope": {
            "type": "string",
            "description": "Scope of transaction policy",
            "example": "AGGREGATE_OF_ALL_ACCOUNTS_OF_ACCOUNT_HOLDER or EACH_ACCOUNT_OF_ACCOUNT_HOLDER",
            "enum": [
              "AGGREGATE_OF_ALL_ACCOUNTS_OF_ACCOUNT_HOLDER",
              "EACH_ACCOUNT_OF_ACCOUNT_HOLDER"
            ]
          },
          "coaID": {
            "type": "integer",
            "description": "Coa ID of issuer to which the transaction policy would be associated",
            "format": "int64"
          },
          "transactionConstraints": {
            "type": "array",
            "description": "Transaction Constraints containing allowed/disallowed transaction categories and time slices",
            "items": {
              "$ref": "#/components/schemas/TransactionConstraint"
            }
          },
          "transactionRules": {
            "type": "array",
            "description": "Transaction rules to be applied on a particular posting",
            "items": {
              "$ref": "#/components/schemas/TransactionRule"
            }
          },
          "balanceRules": {
            "type": "array",
            "description": "Balance rules to be applied either on transacting account or group of accounts of account holder based on applicability criteria and policy scope ",
            "items": {
              "$ref": "#/components/schemas/BalanceRule"
            }
          },
          "aggregateRules": {
            "type": "array",
            "description": "Aggregate rules (daily, weekly, monthly, quarterly, yearly) to be applied based on applicability criteria and transaction category",
            "items": {
              "$ref": "#/components/schemas/AggregateRule"
            }
          },
          "effectiveFrom": {
            "type": "string",
            "description": "Effective date (epoch time in milliseconds) from when the transaction policy will be applied",
            "example": "2020-02-18T06:24:14.000Z"
          },
          "expiresAt": {
            "type": "string",
            "description": "Expiry date (epoch time in milliseconds) for the transaction policy post which it will not be applied",
            "example": "2020-02-18T06:24:14.000Z"
          },
          "violationAction": {
            "type": "string",
            "description": "Transaction policy violation action",
            "example": "DECLINE, NOTIFY, DECLINE_AND_NOTIFY",
            "enum": [
              "DECLINE_AND_NOTIFY",
              "DECLINE",
              "NOTIFY"
            ]
          },
          "accountsApplicableTo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Applicability or Filtering Criteria to pick account[s] of the account holder"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information that you would like to associate with the transaction policy"
          }
        }
      },
      "CreateUserTransactionCategoryRequest": {
        "type": "object",
        "properties": {
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "transactionAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionCategoryStructure"
            }
          }
        }
      },
      "CreateUserTransactionCategoryResponse": {
        "type": "object"
      },
      "DispatchOrderRequest": {
        "type": "object",
        "properties": {
          "plasticCode": {
            "type": "string"
          },
          "thirdLineEmbossing": {
            "type": "string"
          },
          "fourthLineEmbossing": {
            "type": "string"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tenantAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "vendorAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ECDHEncryptedCardPayload": {
        "type": "object",
        "properties": {
          "serverPublicKey": {
            "type": "string"
          },
          "encryptedData": {
            "type": "string"
          },
          "iv": {
            "type": "string"
          }
        }
      },
      "EditIndividualApplicationRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "formID": {
            "type": "string"
          },
          "spoolID": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "individualID": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "source": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "dob": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string"
          },
          "mothersMaidenName": {
            "type": "string"
          }
        }
      },
      "EditIndividualApplicationStandardRequest": {
        "type": "object",
        "properties": {
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": "string"
          },
          "individualID": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "mothersMaidenName": {
            "type": "string"
          }
        }
      },
      "EmbossAndActivateReplacementOrderRequest": {
        "type": "object",
        "properties": {
          "oldCardReferenceNumber": {
            "type": "string"
          },
          "orderID": {
            "type": "string"
          },
          "expiry": {
            "$ref": "#/components/schemas/JsonElement"
          },
          "thirdLineEmbossing": {
            "type": "string"
          },
          "fourthLineEmbossing": {
            "type": "string"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tenantAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "vendorAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "signatoryJID": {
            "type": "string"
          },
          "signed": {
            "type": "boolean"
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "EmptyPayload": {
        "type": "object"
      },
      "EntityCodeResponse": {
        "type": "object",
        "properties": {
          "entityCode": {
            "type": "string"
          }
        }
      },
      "EntityGroup": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "entityType": {
            "type": "string",
            "enum": [
              "ACCOUNT",
              "ACCOUNT_HOLDER",
              "BENEFICIARY",
              "BENEFICIARY_ACCOUNT"
            ]
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "schema": {
            "$ref": "#/components/schemas/JsonObject"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "modifiedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/JsonElement"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "Expiry": {
        "type": "object",
        "properties": {
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FormFactor": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "formFactorProductID": {
            "type": "string"
          },
          "formFactorID": {
            "type": "string"
          },
          "identityID": {
            "type": "string"
          },
          "targetURI": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "policies": {
            "$ref": "#/components/schemas/Policies"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "reason": {
            "$ref": "#/components/schemas/StatusReason"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FormFactorProduct": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "policies": {
            "$ref": "#/components/schemas/Policies"
          },
          "provider": {
            "type": "string"
          },
          "skuID": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "issuanceStatus": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "paymentStatus": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FusionConfigResponse": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the key-value pair",
            "example": "123123"
          },
          "value": {
            "type": "string",
            "description": "The value of the key-value pair",
            "example": "test"
          },
          "type": {
            "type": "string",
            "description": "The type for the key-value config",
            "example": "SANDBOX_VBO_MAPPING"
          },
          "description": {
            "type": "string",
            "description": "The description for the key-value config",
            "example": "Description of the key"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "GetAggregateExpressionListResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "aggregateExpressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateExpression"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetAllCoAsResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "coAConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CoAConfig"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetAllTransactionPoliciesResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPolicyResponse"
            }
          }
        }
      },
      "GetAllTxnCategoriesResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "transactionCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxnCategory"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetCalendarResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "calendarInfo": {
            "$ref": "#/components/schemas/CalendarInfo"
          }
        }
      },
      "GetCoaListResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "coaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coa"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetCoaNodesResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "coaNodeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CoaNode"
            }
          }
        }
      },
      "GetPoliciesResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Policy"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetPolicyErrorsResponse": {
        "type": "object",
        "properties": {
          "errorCodes": {
            "type": "array",
            "description": "list of policy error codes",
            "items": {
              "$ref": "#/components/schemas/PolicyError"
            }
          }
        }
      },
      "GetPolicyResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "policy": {
            "$ref": "#/components/schemas/Policy"
          }
        }
      },
      "GetPolicyTransactionCategoryResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "code": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "attrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxnCategoryAttrs"
            }
          }
        }
      },
      "GetProductFamilyListResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "productFamilyList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFamily"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetProductListResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "productList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Interceptor": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string"
          },
          "resourceProductId": {
            "type": "string"
          },
          "actionName": {
            "type": "string",
            "enum": [
              "PAYMENT_REQUESTED",
              "PAYMENT_AUTHORIZATION_RECEIVED",
              "PAYMENT_REVERSAL_REQUESTED"
            ]
          },
          "connectionConfig": {
            "$ref": "#/components/schemas/ConnectionConfig"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IssueAccountArtifactRequest": {
        "type": "object",
        "properties": {
          "accountProductID": {
            "type": "string",
            "description": "ID of the account product ID which is part of the issuing bundle",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "name": {
            "type": "string",
            "description": "The name which would be preferred in the account name",
            "example": "Victor"
          },
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountVector"
            }
          },
          "accessors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Accessor"
            }
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountRelation"
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IssueAccountArtifactResponse": {
        "required": [
          "accountHolderID",
          "bundleID"
        ],
        "type": "object",
        "properties": {
          "bundleID": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "accountHolderID": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "accountID": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "IssueAccountProductsRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "maxLength": 37,
            "minLength": 0,
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "accountHolderID": {
            "type": "string",
            "description": "Account Holder to whom the bundle is being issued",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "issueAccountArtifactRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueAccountArtifactRequest"
            }
          }
        }
      },
      "IssueBundleRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "maxLength": 37,
            "minLength": 0,
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "name": {
            "type": "string",
            "description": "The name which would be preferred in the account name",
            "example": "Victor"
          },
          "phoneNumber": {
            "pattern": "([+]\\d{1,3})?\\d{10}",
            "type": "string",
            "description": "The phone number to be assosciated with the account and the card",
            "example": "+919876543210"
          },
          "targetAccount": {
            "type": "string",
            "description": "The account number to be assosciated with the card",
            "example": "account://account-num-1"
          },
          "accountHolderID": {
            "type": "string",
            "description": "ID of the individual being issued with the account.",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IssueBundleResponse": {
        "type": "object",
        "properties": {
          "requestID": {
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "bundleID": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueAccountArtifactResponse"
            }
          },
          "paymentInstruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssuePaymentProductResponse"
            }
          }
        }
      },
      "IssueFormFactorRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "formFactorProductID": {
            "type": "string",
            "description": "ID of the form factor/card which is being issued",
            "example": "9d7ae299"
          },
          "resourceID": {
            "type": "string",
            "description": "ID of the resource which is being issued and is part of the bundle",
            "example": "9d7ae299"
          },
          "targetAccountID": {
            "type": "string",
            "description": "ID of the individual's account which is to be linked to the resource/card",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "accountHolderID": {
            "type": "string",
            "description": "ID of the individual being issued with the form factor.",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "orderDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IssueFormFactorResponse": {
        "type": "object",
        "properties": {
          "requestID": {
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "bundleID": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "formFactorID": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "targetUri": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          }
        }
      },
      "IssueFormFactorStandardRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "formFactorProductID": {
            "type": "string",
            "description": "ID of the form factor/card which is being issued",
            "example": "9d7ae299"
          },
          "resourceID": {
            "type": "string",
            "description": "ID of the resource which is being issued and is part of the bundle",
            "example": "9d7ae299"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the individual's account which is to be linked to the resource/card",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "accountHolderID": {
            "type": "string",
            "description": "ID of the individual being issued with the form factor.",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "orderDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IssuePaymentProductRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "maxLength": 37,
            "minLength": 0,
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "targetAccountID": {
            "type": "string",
            "description": "ID of the individual's account which is to be linked to the resource/card",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "phoneNumber": {
            "pattern": "([+]\\d{1,3})?\\d{10}",
            "type": "string",
            "description": "The phone number to be assosciated with the account and the card",
            "example": "+919876543210"
          },
          "paymentProductID": {
            "type": "string",
            "description": "ID of the account product ID which is part of the issuing bundle",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IssuePaymentProductResponse": {
        "type": "object",
        "properties": {
          "bundleID": {
            "type": "string"
          },
          "resourceID": {
            "type": "string"
          },
          "formFactorID": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "targetAccount": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          }
        }
      },
      "IssuePaymentProductsRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "maxLength": 37,
            "minLength": 0,
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "accountHolderID": {
            "type": "string",
            "description": "Account Holder to whom the bundle is being issued",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "issuePaymentProductRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssuePaymentProductRequest"
            }
          }
        }
      },
      "IssueResourceRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "maxLength": 37,
            "minLength": 0,
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "targetAccountID": {
            "type": "string",
            "description": "ID of the individual's account which is to be linked to the resource/card",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "phoneNumber": {
            "pattern": "([+]\\d{1,3})?\\d{10}",
            "type": "string",
            "description": "The phone number to be assosciated with the account and the card",
            "example": "+919876543210"
          },
          "resourceProductID": {
            "type": "string",
            "description": "ID of the resource product which is being issued and is part of the bundle",
            "example": "9d7ae299"
          },
          "accountHolderID": {
            "type": "string",
            "description": "ID of the individual being issued with the resource.",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IssueResourceResponse": {
        "type": "object",
        "properties": {
          "bundleID": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "resourceID": {
            "type": "string"
          },
          "targetUri": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          }
        }
      },
      "IssueResourceStandardRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "maxLength": 37,
            "minLength": 0,
            "type": "string",
            "description": "requestID as an idempotent key",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the individual's account which is to be linked to the resource/card",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "phoneNumber": {
            "pattern": "([+]\\d{1,3})?\\d{10}",
            "type": "string",
            "description": "The phone number to be assosciated with the account and the card",
            "example": "+919876543210"
          },
          "resourceProductID": {
            "type": "string",
            "description": "ID of the resource product which is being issued and is part of the bundle",
            "example": "9d7ae299"
          },
          "accountHolderID": {
            "type": "string",
            "description": "ID of the individual being issued with the resource.",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "JID": {
        "type": "object",
        "properties": {
          "appDomain": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "nodeId": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "serviceInstanceJID": {
            "type": "boolean"
          },
          "primaryServiceName": {
            "type": "string"
          },
          "serviceViewName": {
            "type": "string"
          },
          "bareJID": {
            "$ref": "#/components/schemas/JID"
          },
          "serviceViewJID": {
            "type": "boolean"
          },
          "defaultServiceNode": {
            "type": "boolean"
          },
          "jidOfAGroup": {
            "type": "boolean"
          },
          "proxyServiceJID": {
            "type": "boolean"
          }
        }
      },
      "JsonArray": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean"
          },
          "asNumber": {
            "$ref": "#/components/schemas/Number"
          },
          "asFloat": {
            "type": "number",
            "format": "float"
          },
          "asLong": {
            "type": "integer",
            "format": "int64"
          },
          "asDouble": {
            "type": "number",
            "format": "double"
          },
          "asInt": {
            "type": "integer",
            "format": "int32"
          },
          "asByte": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "asCharacter": {
            "type": "string"
          },
          "asBigDecimal": {
            "type": "number"
          },
          "asBigInteger": {
            "type": "integer"
          },
          "asShort": {
            "type": "integer",
            "format": "int32"
          },
          "asString": {
            "type": "string"
          },
          "jsonObject": {
            "type": "boolean"
          },
          "jsonPrimitive": {
            "type": "boolean"
          },
          "jsonNull": {
            "type": "boolean"
          },
          "asJsonNull": {
            "$ref": "#/components/schemas/JsonNull"
          },
          "asJsonArray": {
            "$ref": "#/components/schemas/JsonArray"
          },
          "asJsonPrimitive": {
            "$ref": "#/components/schemas/JsonPrimitive"
          },
          "asJsonObject": {
            "$ref": "#/components/schemas/JsonObject"
          },
          "jsonArray": {
            "type": "boolean"
          }
        }
      },
      "JsonElement": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean"
          },
          "jsonObject": {
            "type": "boolean"
          },
          "jsonPrimitive": {
            "type": "boolean"
          },
          "jsonNull": {
            "type": "boolean"
          },
          "asJsonNull": {
            "$ref": "#/components/schemas/JsonNull"
          },
          "asNumber": {
            "$ref": "#/components/schemas/Number"
          },
          "asJsonArray": {
            "$ref": "#/components/schemas/JsonArray"
          },
          "asJsonPrimitive": {
            "$ref": "#/components/schemas/JsonPrimitive"
          },
          "asJsonObject": {
            "$ref": "#/components/schemas/JsonObject"
          },
          "jsonArray": {
            "type": "boolean"
          },
          "asFloat": {
            "type": "number",
            "format": "float"
          },
          "asLong": {
            "type": "integer",
            "format": "int64"
          },
          "asDouble": {
            "type": "number",
            "format": "double"
          },
          "asInt": {
            "type": "integer",
            "format": "int32"
          },
          "asByte": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "asCharacter": {
            "type": "string"
          },
          "asBigDecimal": {
            "type": "number"
          },
          "asBigInteger": {
            "type": "integer"
          },
          "asShort": {
            "type": "integer",
            "format": "int32"
          },
          "asString": {
            "type": "string"
          }
        }
      },
      "JsonNull": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean"
          },
          "jsonObject": {
            "type": "boolean"
          },
          "jsonPrimitive": {
            "type": "boolean"
          },
          "jsonNull": {
            "type": "boolean"
          },
          "asJsonNull": {
            "$ref": "#/components/schemas/JsonNull"
          },
          "asNumber": {
            "$ref": "#/components/schemas/Number"
          },
          "asJsonArray": {
            "$ref": "#/components/schemas/JsonArray"
          },
          "asJsonPrimitive": {
            "$ref": "#/components/schemas/JsonPrimitive"
          },
          "asJsonObject": {
            "$ref": "#/components/schemas/JsonObject"
          },
          "jsonArray": {
            "type": "boolean"
          },
          "asFloat": {
            "type": "number",
            "format": "float"
          },
          "asLong": {
            "type": "integer",
            "format": "int64"
          },
          "asDouble": {
            "type": "number",
            "format": "double"
          },
          "asInt": {
            "type": "integer",
            "format": "int32"
          },
          "asByte": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "asCharacter": {
            "type": "string"
          },
          "asBigDecimal": {
            "type": "number"
          },
          "asBigInteger": {
            "type": "integer"
          },
          "asShort": {
            "type": "integer",
            "format": "int32"
          },
          "asString": {
            "type": "string"
          }
        }
      },
      "JsonObject": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean"
          },
          "jsonObject": {
            "type": "boolean"
          },
          "jsonPrimitive": {
            "type": "boolean"
          },
          "jsonNull": {
            "type": "boolean"
          },
          "asJsonNull": {
            "$ref": "#/components/schemas/JsonNull"
          },
          "asNumber": {
            "$ref": "#/components/schemas/Number"
          },
          "asJsonArray": {
            "$ref": "#/components/schemas/JsonArray"
          },
          "asJsonPrimitive": {
            "$ref": "#/components/schemas/JsonPrimitive"
          },
          "asJsonObject": {
            "$ref": "#/components/schemas/JsonObject"
          },
          "jsonArray": {
            "type": "boolean"
          },
          "asFloat": {
            "type": "number",
            "format": "float"
          },
          "asLong": {
            "type": "integer",
            "format": "int64"
          },
          "asDouble": {
            "type": "number",
            "format": "double"
          },
          "asInt": {
            "type": "integer",
            "format": "int32"
          },
          "asByte": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "asCharacter": {
            "type": "string"
          },
          "asBigDecimal": {
            "type": "number"
          },
          "asBigInteger": {
            "type": "integer"
          },
          "asShort": {
            "type": "integer",
            "format": "int32"
          },
          "asString": {
            "type": "string"
          }
        }
      },
      "JsonPrimitive": {
        "type": "object",
        "properties": {
          "number": {
            "type": "boolean"
          },
          "boolean": {
            "type": "boolean"
          },
          "asBoolean": {
            "type": "boolean"
          },
          "string": {
            "type": "boolean"
          },
          "asNumber": {
            "$ref": "#/components/schemas/Number"
          },
          "asFloat": {
            "type": "number",
            "format": "float"
          },
          "asLong": {
            "type": "integer",
            "format": "int64"
          },
          "asDouble": {
            "type": "number",
            "format": "double"
          },
          "asInt": {
            "type": "integer",
            "format": "int32"
          },
          "asByte": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "asCharacter": {
            "type": "string"
          },
          "asBigDecimal": {
            "type": "number"
          },
          "asBigInteger": {
            "type": "integer"
          },
          "asShort": {
            "type": "integer",
            "format": "int32"
          },
          "asString": {
            "type": "string"
          },
          "jsonObject": {
            "type": "boolean"
          },
          "jsonPrimitive": {
            "type": "boolean"
          },
          "jsonNull": {
            "type": "boolean"
          },
          "asJsonNull": {
            "$ref": "#/components/schemas/JsonNull"
          },
          "asJsonArray": {
            "$ref": "#/components/schemas/JsonArray"
          },
          "asJsonPrimitive": {
            "$ref": "#/components/schemas/JsonPrimitive"
          },
          "asJsonObject": {
            "$ref": "#/components/schemas/JsonObject"
          },
          "jsonArray": {
            "type": "boolean"
          }
        }
      },
      "KYCDetails": {
        "type": "object",
        "properties": {
          "kycStatus": {
            "type": "string"
          },
          "updateTime": {
            "type": "string",
            "format": "date-time"
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time"
          },
          "kycStatusPostExpiry": {
            "type": "string"
          },
          "authType": {
            "type": "string"
          },
          "authData": {
            "$ref": "#/components/schemas/JsonObject"
          },
          "kycAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ListEntityGroupResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "entityGroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityGroup"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ListInterceptorResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "interceptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Interceptor"
            }
          }
        }
      },
      "ListPaymentProductResponse": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "paymentProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentProduct"
            }
          }
        }
      },
      "ListPaymentResponse": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "ListTransactionPoliciesResponse": {
        "type": "object",
        "properties": {
          "transactionPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPolicyResponse"
            }
          }
        }
      },
      "Money": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Number": {
        "type": "object"
      },
      "OrderDetails": {
        "type": "object",
        "properties": {
          "orderID": {
            "type": "string"
          },
          "cardSkuID": {
            "type": "string"
          },
          "cardSku": {
            "$ref": "#/components/schemas/CardSku"
          },
          "plasticCode": {
            "type": "string"
          },
          "thirdLineEmbossing": {
            "type": "string"
          },
          "fourthLineEmbossing": {
            "type": "string"
          },
          "expiry": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "deliveryAddress": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tenantAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "vendorAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "orderStatus": {
            "type": "string"
          },
          "embossedAt": {
            "type": "string",
            "format": "date-time"
          },
          "orderedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrderSummary": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "orderID": {
            "type": "string"
          },
          "cardSkuID": {
            "type": "string"
          },
          "plasticCode": {
            "type": "string"
          },
          "expiry": {
            "$ref": "#/components/schemas/Expiry"
          },
          "thirdLineEmbossing": {
            "type": "string"
          },
          "fourthLineEmbossing": {
            "type": "string"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "tenantAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "vendorAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "orderStatus": {
            "type": "string"
          },
          "orderedAt": {
            "type": "string"
          }
        }
      },
      "OverrideIssuanceRequest": {
        "type": "object",
        "properties": {
          "requestID": {
            "type": "string",
            "description": "The request-id of the request that needs to be overriden",
            "example": "ba3673211-g586-4acb-859e-bb9c60d3qu72"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "remarks": {
            "type": "string",
            "description": "Operator provided remarks/reasons for issuance",
            "example": "Different than SDN"
          },
          "action": {
            "pattern": "APPROVE|DECLINE",
            "type": "string",
            "description": "Operator provided remarks/reasons for issuance",
            "example": "Different than SDN"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "POP": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "label": {
            "type": "string"
          },
          "entityID": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "contactList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "status": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "PageMetadata": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "number": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PagedModel": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "requestChannelType": {
            "type": "string",
            "enum": [
              "ZETA_POS",
              "SUPER_CARD",
              "COLLECT_CARD",
              "COLLECT_CALL",
              "ZETA_PAYMENT_PAGE",
              "ZETA_USER_APP",
              "ZETA_API",
              "ZETA_EXPRESS_REMOTE",
              "ZETA_EXPRESS_KIOSK",
              "ZETA_SHADOW_CARD",
              "ZETA_UNKNOWN",
              "UPI",
              "VOID",
              "IMPS",
              "NEFT"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "VOID",
              "PAYMENT_REQUESTED",
              "PAYMENT_AUTHORIZATION_REQUESTED",
              "CHALLENGE_REQUIRED",
              "CHALLENGE_SUBMITTED",
              "PAYMENT_AUTHORIZATION_RECEIVED",
              "PAYMENT_EFFECTED",
              "PAYMENT_CAPTURED",
              "REVERSAL_INITIATED",
              "PAYMENT_REVERSED",
              "PAYMENT_REQUEST_CANCELLED",
              "PAYMENT_REQUEST_DECLINED",
              "PAYMENT_REQUEST_FAILED",
              "PAYMENT_DECLINED",
              "PAYMENT_FAILED"
            ]
          },
          "value": {
            "$ref": "#/components/schemas/Money"
          },
          "stateTransitions": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "payer": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "payee": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "paymentRequest": {
            "$ref": "#/components/schemas/PublicPaymentRequestWrapper"
          },
          "receipts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Receipt"
            }
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PaymentProduct": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Channel"
            }
          },
          "resourceProduct": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PersonalizedOrderRequest": {
        "type": "object",
        "properties": {
          "orderID": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "cardSkuID": {
            "type": "string"
          },
          "expiry": {
            "$ref": "#/components/schemas/Expiry"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalizedOrderRequestRecord"
            }
          }
        }
      },
      "PersonalizedOrderRequestRecord": {
        "type": "object",
        "properties": {
          "recordID": {
            "type": "integer",
            "format": "int32"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "plasticCode": {
            "type": "string"
          },
          "thirdLineEmbossing": {
            "type": "string"
          },
          "fourthLineEmbossing": {
            "type": "string"
          },
          "vendorAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tenantAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "additionalAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Policies": {
        "type": "object",
        "properties": {
          "issuancePolicies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paymentPolicies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Policy": {
        "type": "object",
        "properties": {
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "AGGREGATE_OF_ALL_ACCOUNTS_OF_ACCOUNT_HOLDER",
              "EACH_ACCOUNT_OF_ACCOUNT_HOLDER"
            ]
          },
          "coaID": {
            "type": "integer",
            "format": "int64"
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "txnConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnConstraint"
            }
          },
          "policyTxnRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnRule"
            }
          },
          "policyBalanceRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyBalanceRule"
            }
          },
          "policyAggregateRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyAggregateRule"
            }
          },
          "effectiveFrom": {
            "type": "integer",
            "format": "int64"
          },
          "expiresAt": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "updatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "policyViolationAction": {
            "type": "string",
            "enum": [
              "DECLINE_AND_NOTIFY",
              "DECLINE",
              "NOTIFY"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED"
            ]
          }
        }
      },
      "PolicyAggregateRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "policyVersionID": {
            "type": "integer",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT",
              "DEBIT_REVERSAL",
              "CREDIT_REVERSAL"
            ]
          },
          "categoryCode": {
            "type": "string"
          },
          "aggExpressionID": {
            "type": "integer",
            "format": "int64"
          },
          "aggExpressionCode": {
            "type": "string"
          },
          "dailyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "weeklyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "monthlyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "quarterlyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "yearlyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "errorCode": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "VELOCITY",
              "VOLUME"
            ]
          }
        }
      },
      "PolicyBalanceRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "policyVersionID": {
            "type": "integer",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT",
              "DEBIT_REVERSAL",
              "CREDIT_REVERSAL"
            ]
          },
          "minRequiredBalance": {
            "type": "integer",
            "format": "int64"
          },
          "maxAllowedBalance": {
            "type": "integer",
            "format": "int64"
          },
          "minRequiredBalanceBeforeTxn": {
            "type": "integer",
            "format": "int64"
          },
          "maxAllowedBalanceBeforeTxn": {
            "type": "integer",
            "format": "int64"
          },
          "transactionCategory": {
            "type": "string"
          },
          "errorCode": {
            "type": "string"
          }
        }
      },
      "PolicyError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "errorCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PolicyErrorCodeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier",
            "example": "97b93d25-7883-4745-ab10-cc084898393a"
          },
          "ifiID": {
            "type": "integer",
            "description": "ID of the on-boarded organization",
            "format": "int64",
            "example": 140793
          },
          "code": {
            "type": "string",
            "description": "Code given to a policy error code",
            "example": "ERCIN0012345"
          },
          "errorCode": {
            "type": "string",
            "description": "ErrorCode given to a policy ",
            "example": "TRANSACTION_OUTSIDE_TIME_RANGE"
          },
          "description": {
            "type": "string",
            "description": "Description of policy error"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information that you would like to associate with the transaction policy"
          }
        }
      },
      "PolicyMappingStandardResponse": {
        "type": "object"
      },
      "PolicyResponse": {
        "type": "object",
        "properties": {
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "txnConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnConstraint"
            }
          },
          "policyTxnRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnRule"
            }
          },
          "policyBalanceRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyBalanceRule"
            }
          },
          "policyAggregateRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyAggregateRule"
            }
          },
          "effectiveFrom": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "policyViolationAction": {
            "type": "string",
            "enum": [
              "DECLINE_AND_NOTIFY",
              "DECLINE",
              "NOTIFY"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED"
            ]
          }
        }
      },
      "PolicyTxnConstraint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "policyVersionID": {
            "type": "integer",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT",
              "DEBIT_REVERSAL",
              "CREDIT_REVERSAL"
            ]
          },
          "allowedTxnCategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disallowedTxnCategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedTimeSlices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disallowedTimeSlices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errorCode": {
            "type": "string"
          }
        }
      },
      "PolicyTxnRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "policyVersionID": {
            "type": "integer",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT",
              "DEBIT_REVERSAL",
              "CREDIT_REVERSAL"
            ]
          },
          "categoryCode": {
            "type": "string"
          },
          "minRequiredAmount": {
            "type": "integer",
            "format": "int64"
          },
          "maxAllowedAmount": {
            "type": "integer",
            "format": "int64"
          },
          "errorCode": {
            "type": "string"
          }
        }
      },
      "Posting": {
        "type": "object",
        "properties": {
          "postingID": {
            "type": "string"
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "$ref": "#/components/schemas/Money"
          },
          "newBalance": {
            "$ref": "#/components/schemas/Money"
          },
          "instrumentType": {
            "type": "string"
          },
          "productType": {
            "type": "string"
          },
          "cardProgramID": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonObject"
            }
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "ENABLED",
              "BLOCKED"
            ]
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "coaID": {
            "type": "integer",
            "format": "int64"
          },
          "productFamilyID": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "ACCOUNT_BASED",
              "WALLET_BASED"
            ]
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "coaNodeID": {
            "type": "integer",
            "format": "int64"
          },
          "auraAccountGroupID": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "ProductFamily": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "ENABLED",
              "BLOCKED"
            ]
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "coaID": {
            "type": "integer",
            "format": "int64"
          },
          "parentCoaNodeID": {
            "type": "integer",
            "format": "int64"
          },
          "accountingType": {
            "type": "string",
            "enum": [
              "ASSET",
              "LIABILITY",
              "INCOME",
              "EXPENSE",
              "EQUITY"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "WALLET_BASED",
              "ACCOUNT_BASED"
            ]
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "coaNodeID": {
            "type": "integer",
            "format": "int64"
          },
          "auraAccountGroupID": {
            "type": "integer",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductFamilyResponse": {
        "type": "object"
      },
      "ProductResponse": {
        "type": "object"
      },
      "PublicPaymentRequestWrapper": {
        "type": "object",
        "properties": {
          "paymentRequestID": {
            "type": "string"
          },
          "requestFrom": {
            "type": "string"
          },
          "requestTo": {
            "type": "string"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Money"
            }
          },
          "dueBy": {
            "type": "integer",
            "format": "int64"
          },
          "towards": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Receipt": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "receiptType": {
            "type": "string",
            "enum": [
              "AUTHORIZATION",
              "PAYMENT",
              "REVERSAL"
            ]
          },
          "paymentID": {
            "type": "string"
          },
          "paymentRequestID": {
            "type": "string"
          },
          "receiptID": {
            "type": "integer",
            "format": "int64"
          },
          "transactionHash": {
            "type": "string"
          },
          "transactionCode": {
            "type": "string"
          },
          "paymentFrom": {
            "type": "string"
          },
          "paymentTo": {
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "debits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Posting"
            }
          },
          "credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Posting"
            }
          },
          "towards": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "value": {
            "$ref": "#/components/schemas/Money"
          },
          "payerInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "payeeInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "reversedReceiptID": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "signatoryJID": {
            "$ref": "#/components/schemas/JID"
          },
          "zetaSignature": {
            "$ref": "#/components/schemas/ZetaSignature"
          },
          "payloadVersion": {
            "type": "integer",
            "format": "int32"
          },
          "signed": {
            "type": "boolean"
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "ReplacePolicyRequestPayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "txnConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnConstraint"
            }
          },
          "policyTxnRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnRule"
            }
          },
          "policyBalanceRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyBalanceRule"
            }
          },
          "policyAggregateRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyAggregateRule"
            }
          },
          "effectiveFrom": {
            "type": "integer",
            "format": "int64"
          },
          "expiresAt": {
            "type": "integer",
            "format": "int64"
          },
          "policyViolationAction": {
            "type": "string",
            "enum": [
              "DECLINE_AND_NOTIFY",
              "DECLINE",
              "NOTIFY"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ReplacePolicyResponsePayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "policyVersionID": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ReplaceTransactionPolicyRequest": {
        "required": [
          "coaID"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of transaction policy"
          },
          "coaID": {
            "type": "integer",
            "description": "Coa ID of issuer to which the transaction policy would be associated",
            "format": "int64"
          },
          "transactionConstraints": {
            "type": "array",
            "description": "Transaction Constraints containing allowed/disallowed transaction categories and time slices",
            "items": {
              "$ref": "#/components/schemas/TransactionConstraint"
            }
          },
          "transactionRules": {
            "type": "array",
            "description": "Transaction rules to be applied on a particular posting",
            "items": {
              "$ref": "#/components/schemas/TransactionRule"
            }
          },
          "balanceRules": {
            "type": "array",
            "description": "Balance rules to be applied either on transacting account or group of accounts of account holder based on applicability criteria and policy scope ",
            "items": {
              "$ref": "#/components/schemas/BalanceRule"
            }
          },
          "aggregateRules": {
            "type": "array",
            "description": "Aggregate rules (daily, weekly, monthly, quarterly, yearly) to be applied based on applicability criteria and transaction category",
            "items": {
              "$ref": "#/components/schemas/AggregateRule"
            }
          },
          "effectiveFrom": {
            "type": "string",
            "description": "Effective date (epoch time in milliseconds) from when the transaction policy will be applied",
            "example": "2020-02-18T06:24:14.000Z"
          },
          "expiresAt": {
            "type": "string",
            "description": "Expiry date (epoch time in milliseconds) for the transaction policy post which it will not be applied",
            "example": "2020-02-18T06:24:14.000Z"
          },
          "policyViolationAction": {
            "type": "string",
            "description": "Transaction policy violation action",
            "example": "DECLINE, NOTIFY, DECLINE_AND_NOTIFY",
            "enum": [
              "DECLINE_AND_NOTIFY",
              "DECLINE",
              "NOTIFY"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information that you would like to associate with the transaction policy"
          }
        }
      },
      "ReplaceTransactionPolicyRequestPayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifiId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string"
          },
          "txnConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnConstraint"
            }
          },
          "txnLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyTxnRule"
            }
          },
          "balanceLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyBalanceRule"
            }
          },
          "volumeLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyAggregateRule"
            }
          },
          "velocityLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyAggregateRule"
            }
          },
          "policyViolationAction": {
            "type": "string",
            "enum": [
              "DECLINE_AND_NOTIFY",
              "DECLINE",
              "NOTIFY"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "validFrom": {
            "type": "integer",
            "format": "int64"
          },
          "validUntil": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Resource": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "resourceProductId": {
            "type": "string"
          },
          "resourceProduct": {
            "$ref": "#/components/schemas/ResourceProduct"
          },
          "targetURI": {
            "type": "string"
          },
          "formFactors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormFactor"
            }
          },
          "authProfileId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vectors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policies": {
            "$ref": "#/components/schemas/Policies"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ResourceProduct": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "formFactorProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormFactorProduct"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policies": {
            "$ref": "#/components/schemas/Policies"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SensitiveCardView": {
        "type": "object",
        "properties": {
          "algo": {
            "type": "string",
            "enum": [
              "ECDH"
            ]
          },
          "value": {
            "$ref": "#/components/schemas/ECDHEncryptedCardPayload"
          }
        }
      },
      "SignatureAlgorithm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StatusReason": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "LOST_OR_STOLEN",
              "DAMAGED",
              "HOTLISTED",
              "OFAC_BLOCKED",
              "OTHER"
            ]
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "TransactionCategoryStructure": {
        "type": "object",
        "properties": {
          "txnCategoryComparator": {
            "type": "string",
            "enum": [
              "EQUALS",
              "CONTAINS"
            ]
          },
          "attrVal": {
            "type": "string"
          },
          "attrKey": {
            "type": "string"
          }
        }
      },
      "TransactionConstraint": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT",
              "DEBIT_REVERSAL",
              "CREDIT_REVERSAL"
            ]
          },
          "allowedTransactionCategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disallowedTransactionCategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedTimeSlices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disallowedTimeSlices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errorCode": {
            "type": "string"
          }
        }
      },
      "TransactionPolicyResponse": {
        "type": "object",
        "properties": {
          "ifiID": {
            "type": "integer",
            "description": "ID of the on-boarded organization",
            "format": "int64",
            "example": 123123
          },
          "accountHolderID": {
            "type": "string",
            "description": "ID of the account holder",
            "example": "aa267641-f475-4acb-859e-bb9c60d3e9db"
          },
          "coaID": {
            "type": "integer",
            "description": "Code given to a transaction policy",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "description": "Policy ID",
            "format": "int64"
          },
          "code": {
            "type": "string",
            "description": "Coa ID of issuer to which the transaction policy would be associated"
          },
          "description": {
            "type": "string",
            "description": "Description of transaction policy"
          },
          "state": {
            "type": "string",
            "description": "State of the transaction policy",
            "example": "ENABLED or DISABLED",
            "enum": [
              "ENABLED",
              "DISABLED"
            ]
          },
          "scope": {
            "type": "string",
            "description": "Scope of transaction policy",
            "example": "AGGREGATE_OF_ALL_ACCOUNTS_OF_ACCOUNT_HOLDER or EACH_ACCOUNT_OF_ACCOUNT_HOLDER",
            "enum": [
              "AGGREGATE_OF_ALL_ACCOUNTS_OF_ACCOUNT_HOLDER",
              "EACH_ACCOUNT_OF_ACCOUNT_HOLDER"
            ]
          },
          "transactionConstraints": {
            "type": "array",
            "description": "Transaction Constraints containing allowed/disallowed transaction categories and time slices",
            "items": {
              "$ref": "#/components/schemas/TransactionConstraint"
            }
          },
          "transactionRules": {
            "type": "array",
            "description": "Transaction rules to be applied on a particular posting",
            "items": {
              "$ref": "#/components/schemas/TransactionRule"
            }
          },
          "balanceRules": {
            "type": "array",
            "description": "Balance rules to be applied either on transacting account or group of accounts of account holder based on applicability criteria and policy scope ",
            "items": {
              "$ref": "#/components/schemas/BalanceRule"
            }
          },
          "aggregateRules": {
            "type": "array",
            "description": "Aggregate rules (daily, weekly, monthly, quarterly, yearly) to be applied based on applicability criteria and transaction category",
            "items": {
              "$ref": "#/components/schemas/AggregateRule"
            }
          },
          "effectiveFrom": {
            "type": "string",
            "description": "Effective date from when the transaction policy will be applied",
            "example": "2020-02-18T06:24:14.000Z"
          },
          "expiresAt": {
            "type": "string",
            "description": "Expiry date for the transaction policy post which it will not be applied",
            "example": "2020-02-18T06:24:14.000Z"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation date of the transaction policy",
            "example": "2020-02-18T06:24:14.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated date of the transaction policy",
            "example": "2020-02-18T06:24:14.000Z"
          },
          "violationAction": {
            "type": "string",
            "description": "Transaction policy violation action",
            "example": "DECLINE, NOTIFY, DECLINE_AND_NOTIFY",
            "enum": [
              "DECLINE_AND_NOTIFY",
              "DECLINE",
              "NOTIFY"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information that you would like to associate with the transaction policy"
          }
        }
      },
      "TransactionPolicyStandardResponse": {
        "type": "object"
      },
      "TransactionRule": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT",
              "DEBIT_REVERSAL",
              "CREDIT_REVERSAL"
            ]
          },
          "transactionCategoryCode": {
            "type": "string"
          },
          "minRequiredAmount": {
            "type": "integer",
            "format": "int64"
          },
          "maxAllowedAmount": {
            "type": "integer",
            "format": "int64"
          },
          "errorCode": {
            "type": "string"
          }
        }
      },
      "TxnCategory": {
        "type": "object",
        "properties": {
          "ifi": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "attrs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxnCategoryAttrs"
            }
          }
        }
      },
      "TxnCategoryAttrs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "attrKey": {
            "type": "string"
          },
          "attrVal": {
            "type": "string"
          },
          "txnCategoryComparator": {
            "type": "string",
            "enum": [
              "EQUALS",
              "CONTAINS"
            ]
          }
        }
      },
      "UpdateAccountHolderApplicationRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "applicationID": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "dob": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string"
          },
          "mothersMaidenName": {
            "type": "string"
          }
        }
      },
      "UpdateAccountHolderApplicationStandardRequest": {
        "type": "object",
        "properties": {
          "applicationID": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "salutation": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "mothersMaidenName": {
            "type": "string"
          }
        }
      },
      "UpdateBeneficiaryAccountFusionRequest": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          },
          "accountInfo": {
            "$ref": "#/components/schemas/BeneficiaryAccountInfo"
          },
          "status": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "UpdateBeneficiaryAccountRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "beneficiaryID": {
            "type": "string"
          },
          "parentAccountHolderID": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "nickname": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "accountInfo": {
            "$ref": "#/components/schemas/BeneficiaryAccountInfo"
          },
          "status": {
            "type": "string"
          },
          "isVerified": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UpdateBeneficiaryRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "ifiID": {
            "type": "integer",
            "format": "int64"
          },
          "accountHolderID": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "profilePicURL": {
            "type": "string"
          },
          "relationship": {
            "type": "string"
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "REAL",
              "LEGAL",
              "HEADLESS"
            ]
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UpdateCorporateBeneficiaryAccountRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the Beneficiary Account",
            "example": "ENABLED"
          },
          "nickname": {
            "type": "string",
            "description": "Nickname of the Beneficiary Account",
            "example": "true"
          },
          "accountInfo": {
            "$ref": "#/components/schemas/BeneficiaryAccountInfo"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          },
          "type": {
            "type": "string",
            "description": "Type of beneficiary ie NEFT or IMPS or ZETA"
          },
          "verified": {
            "type": "boolean"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "UpdateCorporateBeneficiaryRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the beneficiary being created",
            "example": "Chandler"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the beneficiary being created",
            "example": "Muriel"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the beneficiary being created",
            "example": "Bing"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the beneficiary being created",
            "example": "Male"
          },
          "salutation": {
            "type": "string",
            "description": "Salutation of the beneficiary being created",
            "example": "Mr"
          },
          "relationship": {
            "type": "string",
            "description": "Relation of the beneficiary being created with the individual",
            "example": "Brother"
          },
          "profilePicURL": {
            "type": "string",
            "description": "Profile pic URL of the beneficiary being created",
            "example": "http://abc.com"
          },
          "dob": {
            "type": "string",
            "description": "Date of Birth of the account holder being created",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "REAL",
              "LEGAL",
              "HEADLESS"
            ]
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information which you would like to provide"
          }
        }
      },
      "UpdateFusionConfigRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the key-value pair",
            "example": "123123"
          },
          "value": {
            "type": "string",
            "description": "The value of the key-value pair",
            "example": "test"
          },
          "type": {
            "type": "string",
            "description": "The type for the key-value config",
            "example": "SANDBOX_VBO_MAPPING"
          },
          "description": {
            "type": "string",
            "description": "The type for the key-value config",
            "example": "Description of the key"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UpdateKycStatusRequest": {
        "type": "object",
        "properties": {
          "kycStatus": {
            "type": "string"
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time"
          },
          "kycStatusPostExpiry": {
            "type": "string"
          },
          "kycAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "authType": {
            "type": "string"
          },
          "authData": {
            "$ref": "#/components/schemas/JsonObject"
          }
        }
      },
      "UpdateKycStatusStandardRequest": {
        "type": "object",
        "properties": {
          "kycStatus": {
            "type": "string"
          },
          "expiryTime": {
            "type": "string"
          },
          "kycStatusPostExpiry": {
            "type": "string"
          },
          "kycAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "authType": {
            "type": "string"
          },
          "authData": {
            "$ref": "#/components/schemas/JsonObject"
          }
        }
      },
      "UpdatePolicyErrorCodeRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of policy error"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information that you would like to associate with the transaction policy"
          }
        }
      },
      "UpdatePolicyStateRequestPayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "policyId": {
            "type": "integer",
            "format": "int64"
          },
          "ifiId": {
            "type": "integer",
            "format": "int64"
          },
          "state": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED"
            ]
          }
        }
      },
      "UpdateTransactionPolicyState": {
        "required": [
          "coaID"
        ],
        "type": "object",
        "properties": {
          "coaID": {
            "type": "integer",
            "description": "Coa ID of issuer to which the transaction policy would be associated",
            "format": "int64"
          }
        }
      },
      "UpdateTransactionPolicyStateRequestPayload": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "transactionPolicyID": {
            "type": "string"
          },
          "ifiId": {
            "type": "integer",
            "format": "int64"
          },
          "state": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED"
            ]
          }
        }
      },
      "Vector": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "VectorRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "Void": {
        "type": "object"
      },
      "ZetaSignature": {
        "type": "object",
        "properties": {
          "publicKeyID": {
            "type": "string"
          },
          "algoID": {
            "type": "integer",
            "format": "int32"
          },
          "signatureAlgorithm": {
            "$ref": "#/components/schemas/SignatureAlgorithm"
          },
          "signature": {
            "type": "array",
            "items": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            }
          }
        }
      }
    }
  }
}